{"version":3,"sources":["Categories.js","Hashtags.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Categories","props","className","data","map","category","Category","key","name","onClick","changeView","VIEWS","hashtags","changeCategory","selectCategory","icon","color","Hashtags","ref","useRef","categories","style","marginRight","current","select","setSelectionRange","document","execCommand","minHeight","readOnly","value","join","App","useState","selectedCategory","setSelectedCategory","view","setView","_view","viewContent","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99f99056.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"@fortawesome/fontawesome-free-solid\";\nimport \"./Categories.css\";\nimport { VIEWS } from \"./App\";\n\nexport default function Categories(props) {\n  function selectCategory(category) {\n    props.changeView(VIEWS.hashtags);\n    props.changeCategory(category);\n  }\n\n  return (\n    <div className=\"row px-2\">\n      {props.data.map(category => {\n        return (\n          <Category\n            key={category.name}\n            category={category}\n            onClick={() => selectCategory(category)}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nfunction Category(props) {\n  return (\n    <div className=\"col-4 p-1\">\n      <div className=\"category shadow border rounded\" onClick={props.onClick}>\n        <div className=\"icon-wrapper\">\n          <FontAwesomeIcon\n            icon={props.category.icon || \"hashtag\"}\n            color={props.category.color || \"grey\"}\n          />\n        </div>\n        <h5 className=\"text-secondary\">{props.category.name}</h5>\n      </div>\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"@fortawesome/fontawesome-free-solid\";\nimport \"./Hashtags.css\";\n\nimport { VIEWS } from \"./App\";\n\nexport default function Hashtags(props) {\n  const ref = useRef(null);\n\n  function copy() {\n    ref.current.select();\n    ref.current.setSelectionRange(0, 99999); /*For mobile devices*/\n    document.execCommand(\"copy\");\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-3\">\n        <button\n          className=\"btn btn-outline-secondary btn-block\"\n          onClick={() => props.changeView(VIEWS.categories)}\n        >\n          <FontAwesomeIcon icon=\"angle-left\" />\n        </button>\n      </div>\n      <div className=\"col-6\">\n        <h5 className=\"my-1\">\n          <FontAwesomeIcon\n            icon={props.category.icon || \"hashtag\"}\n            color={props.category.color || \"black\"}\n            style={{ marginRight: \"7px\" }}\n          />\n          {props.category.name}\n        </h5>\n      </div>\n      <div className=\"col-3\">\n        <button className=\"btn btn-outline-secondary btn-block\" onClick={copy}>\n          <FontAwesomeIcon icon=\"copy\" />\n        </button>\n      </div>\n      <div className=\"col-12 mt-3\">\n        <textarea\n          ref={ref}\n          className=\"form-control p-2 w-100 bg-light\"\n          style={{ minHeight: \"50vh\" }}\n          readOnly={true}\n          value={`#${props.category.hashtags.join(\" #\")}`}\n        />\n      </div>\n    </div>\n  );\n}\n","// Kateqoriya adlari qeti tekrarlanmamlidir, eyni ola bilmez!\nexport const data = [\n  {\n    name: \"Heyvanlar\",\n    color: \"#FF9AA2\",\n    icon: \"paw\",\n    hashtags: [\n      \"dog\",\n      \"cat\",\n      \"bird\",\n      \"love\",\n      \"instagood\",\n      \"photooftheday\",\n      \"fashion\",\n      \"beautiful\",\n      \"happy\",\n      \"cute\",\n      \"tbt\",\n      \"like4like\",\n      \"followme\",\n      \"picoftheday\",\n      \"follow\",\n      \"me\",\n      \"selfie\",\n      \"summer\",\n      \"art\",\n      \"instadaily\",\n      \"friends\",\n      \"repost\",\n      \"nature\",\n      \"girl\",\n      \"fun\",\n      \"style\",\n      \"smile\",\n      \"food\"\n    ]\n  },\n  {\n    name: \"Moda\",\n    color: \"#FFDAC1\",\n    icon: \"tshirt\",\n    hashtags: [\"dressing\", \"watch\", \"necklace\"]\n  },\n  {\n    name: \"Texnologiya\",\n    color: \"#E2F0CB\",\n    icon: \"laptop\",\n    hashtags: [\"laptop\", \"iphone\", \"android\"]\n  },\n  {\n    name: \"Musiqi\",\n    color: \"#B5EAD7\",\n    icon: \"music\",\n    hashtags: [\"song\", \"lyrics\", \"youtube\"]\n  },\n  {\n    name: \"Idman\",\n    color: \"#C7CEEA\",\n    icon: \"futbol\",\n    hashtags: [\"tv\", \"dance\", \"sport\"]\n  },\n  {\n    name: \"Yemək\",\n    color: \"#FFB7B2\",\n    icon: \"coffee\",\n    hashtags: [\"ayran\", \"doner\", \"burger\"]\n  }\n];\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Categories from \"./Categories.js\";\nimport Hashtags from \"./Hashtags.js\";\nimport { data } from \"./Data\";\n\nexport const VIEWS = {\n  categories: \"Kateqoriyalar\",\n  hashtags: \"Həşteqlər\"\n};\n\nexport default function App() {\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [view, setView] = useState(VIEWS.categories);\n\n  function changeView(_view) {\n    setView(_view);\n  }\n\n  function changeCategory(category) {\n    setSelectedCategory(category);\n  }\n\n  function render() {\n    let viewContent = (\n      <Categories\n        data={data}\n        changeView={changeView}\n        changeCategory={changeCategory}\n      />\n    );\n\n    if (view === VIEWS.hashtags) {\n      viewContent = (\n        <Hashtags category={selectedCategory} changeView={changeView} />\n      );\n    }\n\n    return (\n      <div className=\"App container\">\n        <h4 className=\"bg-light mb-3 mt-2 mt-n1 mx-n3 pt-2 px-2 py-1 text-center text-secondary border-bottom\">\n          {view}\n        </h4>\n        {viewContent}\n      </div>\n    );\n  }\n\n  return render();\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}